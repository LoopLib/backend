# Import necessary libraries for web server, file handling, and audio processing
from flask import Flask, request, jsonify  # Flask for web server, request parsing, and JSON responses
from flask_cors import CORS  # CORS support for handling cross-origin requests
from werkzeug.utils import secure_filename  # For safely handling uploaded filenames
import os  # OS utilities for file management
import librosa  # Librosa for audio analysis and feature extraction
from pydub import AudioSegment  # Pydub for audio format conversion
import numpy as np  # NumPy for numerical operations
import warnings  # To manage and suppress warnings
import boto3  # AWS SDK (not used in this script but likely for future integration)

# Import custom modules for various audio analyses
from key_detection import detect_key  # Module to detect musical key
from bpm_detection import detect_bpm  # Module to detect beats per minute
from instrument_detection import classify_audio  # Module to detect instrument type
from fingerprint import generate_fingerprint  # Module to create audio fingerprint
from genre_detection import predict_genre  # Module to predict music genre

# Suppress warnings generated by librosa for cleaner console output
warnings.filterwarnings('ignore')

# Initialize Flask app
app = Flask(__name__)

# Enable Cross-Origin Resource Sharing (CORS) for all routes
CORS(app, resources={r"/*": {"origins": "*"}})

# Define directory for uploading files
app.config['UPLOAD_FOLDER'] = './uploads'

# Create the upload folder if it doesn't exist
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Route for analyzing a segment of audio sent as raw data
@app.route('/analyze_segment', methods=['POST'])
def analyze_segment():
    try:
        # Parse JSON data from the POST request
        data = request.json
        # Convert the audio segment to a NumPy array
        segment = np.array(data.get('segment', []))
        # Use the provided sample rate or default to 44100 Hz
        sr = data.get('sr', 44100)

        # Raise an error if no segment data was received
        if len(segment) == 0:
            raise ValueError("Received empty audio segment for analysis")

        # Detect the key and confidence using the custom module
        key, confidence = detect_key(segment, sr)
        print(f"Detected Key: {key}, Confidence: {confidence}%")

        # Return the key and confidence as JSON
        return jsonify({'key': key, 'confidence': confidence}), 200
    except Exception as e:
        # Print and return error if something goes wrong
        print("Error analyzing segment:", str(e))
        return jsonify({'error': str(e)}), 500

# Route for uploading an audio file and performing full analysis
@app.route('/upload', methods=['POST'])
def upload_file():
    # Check if file is in the request
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    file = request.files['file']
    # Check if a file was actually selected
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    print("Received file:", file.filename)

    # Sanitize filename to avoid malicious paths
    filename = secure_filename(file.filename)
    # Build full file path in upload directory
    file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    # Save uploaded file to disk
    file.save(file_path)

    try:
        # Convert .mp3 files to .wav format if necessary
        if file_path.endswith(".mp3"):
            audio = AudioSegment.from_mp3(file_path)  # Load mp3 with pydub
            file_path_wav = file_path.replace(".mp3", ".wav")  # Define wav file path
            audio.export(file_path_wav, format="wav")  # Export audio as wav
            y, sr = librosa.load(file_path_wav, sr=None)  # Load wav with librosa
            os.remove(file_path_wav)  # Clean up temporary wav file
        else:
            y, sr = librosa.load(file_path, sr=None)  # Load audio file directly if not mp3

        print("File loaded successfully.")

        # Detect tempo (BPM) from audio signal
        bpm_final = detect_bpm(y, sr)
        print(f"Detected BPM: {bpm_final}")

        # Separate harmonic components using harmonic-percussive source separation
        y_harmonic, _ = librosa.effects.hpss(y)

        # Detect musical key from harmonic part
        key, confidence = detect_key(y_harmonic, sr)
        print(f"Detected Key: {key} with confidence {confidence}%")

        # Detect the main instrument from the audio file
        detected_instrument = classify_audio(file_path)
        print(f"Detected Instrument: {detected_instrument}")

        # Generate unique fingerprint from the audio
        fingerprint = generate_fingerprint(file_path)
        print(f"Generated Fingerprint: {fingerprint}")

        # Predict genre and confidence from the audio
        genre, genre_confidence = predict_genre(file_path)
        print(f"Predicted Genre: {genre} ({genre_confidence * 100:.2f}% confidence)")

    except Exception as e:
        # Handle and log any analysis errors
        print("Error analyzing file:", str(e))
        os.remove(file_path)  # Remove uploaded file if an error occurs
        return jsonify({'error': 'Error analyzing file', 'details': str(e)}), 500

    # Remove file after analysis to clean up disk space
    os.remove(file_path)

    # Return all detected audio metadata as JSON
    return jsonify({
        'message': 'File uploaded successfully',
        'bpm': bpm_final,
        'key': key,
        'instrument': detected_instrument,
        'fingerprint': fingerprint,
        'genre': genre,
        'genre_confidence': round(genre_confidence * 100, 2)
    }), 200

# Run the Flask server when the script is executed directly
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 8080))  # ðŸ‘ˆ Use Render's port or default to 8080
    app.run(debug=False, host="0.0.0.0", port=port, use_reloader=False)
